version: 2.1

description: General purpose continuous integration configuration

orbs:
  circleci-cli: circleci/circleci-cli@0.1.1
  orbs: circleci/orb-tools@2.0.2

executors:
  node:
    docker:
      - image: circleci/node:10.13.0-jessie
        user: circleci
  buildpack-deps:
    docker:
      - image: circleci/buildpack-deps:jessie
        user: circleci
  terraform:
    parameters:
      tag:
        type: string
    docker:
      - image: edahlseng/circleci-terraform:<< parameters.tag >>-jessie
        user: circleci

commands:
  put-all:
    description: Save all files to the workspace
    steps:
      - persist_to_workspace:
          root: . # relative to working_directory
          paths: # relative to root
            - .
  put-directory:
    description: Save all files to the workspaces
    parameters:
      path:
        type: string
    steps:
      - persist_to_workspace:
          root: . # relative to working_directory
          paths: # relative to root
            - << parameters.path >>
  put-path:
    description: Save path to the workspace
    parameters:
      path:
        type: string
    steps:
      - persist_to_workspace:
          root: . # relative to working_directory
          paths: # relative to root
            - << parameters.path >>
  put-test-results:
    description: Save test results
    parameters:
      path:
        type: string
    steps:
      - store_test_results:
          path: << parameters.path >>
      - store_artifacts:
          path: << parameters.path >>
  get-workspace:
    description: Load all files from workspace
    steps:
      - attach_workspace:
          at: . # relative from working_directory
  halt-if-not-release-commit:
    description: Check commit message for chore(release), halting job if false
    steps:
      - run:
          name: Ensuring commit is not a release commit
          command: |
            if [[ ! $(git log --format=%B -n 1 $CIRCLE_SHA1 | head -n 1) =~ chore\(release\): ]]; then
              echo "Release commit, halting"
              circleci-agent step halt
            fi
  halt-if-release-commit:
    description: Check commit message for chore(release), halting job if true
    steps:
      - run:
          name: Ensuring commit is a release commit
          command: |
            if [[ $(git log --format=%B -n 1 $CIRCLE_SHA1 | head -n 1) =~ chore\(release\): ]]; then
              echo "Release commit, halting"
              circleci-agent step halt
            fi
  setup-git-user:
    description: Configures Git so that actions are performed on behalf of the specified user
    parameters:
      git-ssh-fingerprint:
        type: string
      git-user-email:
        type: string
      git-user-name:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - << parameters.git-ssh-fingerprint >>
      - run:
          name: Adding GitHub to known_hosts file
          command: |
            mkdir -p ~/.ssh

            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            ' >> ~/.ssh/known_hosts
      - run:
          name: Configuring Git user
          command: |
            git config --global user.email "<< parameters.git-user-email >>"
            git config --global user.name "<< parameters.git-user-name >>"
  tag:
    description: Tag current release commit and push the new tag
    steps:
      - run:
          name: Creating Git tag
          command: |
            versionTag=$(echo $(git log --format=%B -n 1 $CIRCLE_SHA1 | head -n 1) | sed -r 's/chore\(release\): ([0-9]+\.[0-9]+\.[0-9]+)/v\1/')

            echo "Tagging commit"
            git tag "$versionTag"
      - run:
          name: Pushing tag to Git remote
          command: git push --tags
      - put-directory:
          path: .git
  configure-aws-profile:
    steps:
      - run:
          name: Configuring AWS profile
          command: |
            mkdir ~/.aws

            cat \<<EOF >> ~/.aws/config
            # AWS Config
            [profile infrastructure]
            role_arn = ${AWS_CI_ROLE}
            source_profile = default
            EOF

            cat \<<EOF > ~/.aws/credentials
            # AWS Credentials
            [default]
            aws_access_key_id = ${AWS_ACCESS_KEY_ID}
            aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
            EOF

            echo 'unset AWS_ACCESS_KEY_ID' >> $BASH_ENV
            echo 'unset AWS_SECRET_ACCESS_KEY' >> $BASH_ENV
            echo 'export AWS_PROFILE="infrastructure"' >> $BASH_ENV
            echo 'export AWS_SDK_LOAD_CONFIG=1' >> $BASH_ENV
  login-ecr:
    parameters:
      aws-region:
        type: string
    steps:
      - run:
          name: Logging in to ECR
          command: |
            if ! which aws > /dev/null; then
              sudo apt-get update && sudo apt-get install -y python3-pip
              sudo pip3 install awscli
            fi

            login="$(aws ecr get-login --no-include-email --region << parameters.aws-region >>)"
            ${login}

jobs:
  install-dependencies-npm:
    parameters:
      setup-steps:
        type: steps
        default: []
    executor: node
    steps:
      - checkout
      - steps: << parameters.setup-steps >>
      - put-all
      - run:
          name: Installing NPM dependencies
          command: npm ci || npm install
      - put-directory:
          path: node_modules
  lint-circleci-orb:
    executor: circleci-cli/default
    steps:
      - get-workspace
      - orbs/validate:
          orb-path: sources/index.yml
  lint-commit:
    executor: node
    steps:
      - get-workspace
      - run:
          name: Linting commit messages
          command: npm run lint-report:commit -- --from origin/master
      - put-test-results:
          path: ./linting-results
  lint-css:
    executor: node
    steps:
      - get-workspace
      - run:
          name: Linting CSS
          command: npm run lint-report:css
      - put-test-results:
          path: ./linting-results
  lint-js:
    executor: node
    steps:
      - get-workspace
      - run:
          name: Linting JavaScript files
          command: npm run lint-report:js
      - put-test-results:
          path: ./linting-results
  lint-json:
    executor: node
    steps:
      - get-workspace
      - run:
          name: Linting JSON files
          command: npm run lint-report:json
      - put-test-results:
          path: ./linting-results
  lint-terraform:
    parameters:
      terraform-image-tag:
        type: string
    executor:
      name: terraform
      tag: << parameters.terraform-image-tag >>
    steps:
      - get-workspace
      - run:
          name: Linting Terraform files
          command: terraform fmt -check=true
  lint-yaml:
    executor: node
    steps:
      - get-workspace
      - run:
          name: Linting YAML files
          command: npm run lint-report:yaml
      - put-test-results:
          path: ./linting-results
  test:
    executor: circleci-cli/default
    steps:
      - get-workspace
      - run:
          name: Running tests
          command: npm run test-report
      - put-test-results:
          path: ./test-results
      - store_artifacts:
          path: ./coverage
          destination: coverage
  create-github-release:
    executor: buildpack-deps
    parameters:
      github-access-token:
        type: string
      artifact-paths:
        type: string
        default: ""
    steps:
      - get-workspace
      - halt-if-not-release-commit
      - run:
          name: Creating release
          command: |
            versionTag=$(git log --format=%B -n 1 $CIRCLE_SHA1 | head -n 1 | sed -r 's/chore\(release\): ([0-9]+\.[0-9]+\.[0-9]+)/v\1/')

            curl -X POST \
              -H 'Accept: application/vnd.github.v3+json' \
              -H "Authorization: token << parameters.github-access-token >>" \
              "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases" \
              --data @- \<<-EOF | tee curl.log
                {
                  "tag_name": "${versionTag}",
                  "name": "Version ${versionTag:1}"
                }
            EOF

            <<# parameters.artifact-paths >>
              artifactPaths=(<< parameters.artifact-paths>>)
              artifactUploadUrl=$(cat curl.log | jq -r .upload_url | sed -r 's/^(.*)\{\?name,label\}$/\1/')

              echo "Uploading ${#artifactPaths} artifacts: ${artifactPaths[@]}"

              for artifactPath in "${artifactPaths[@]}"; do
                curl -X POST \
                  -H "Authorization: token << parameters.github-access-token >>" \
                  -H "Content-Type: $(file -b --mime-type "${artifactPath}")" \
                  "${artifactUploadUrl}?name=$(basename "${artifactPath}")" \
                  --data-binary "@${artifactPath}"
              done
            <</ parameters.artifact-paths >>
  create-release-pr:
    executor: node
    parameters:
      git-ssh-fingerprint:
        type: string
      git-user-email:
        type: string
      git-user-name:
        type: string
      github-access-token:
        type: string
    steps:
      - get-workspace
      - halt-if-release-commit
      - setup-git-user:
          git-ssh-fingerprint: << parameters.git-ssh-fingerprint >>
          git-user-email: << parameters.git-user-email >>
          git-user-name: << parameters.git-user-name >>
      - run:
          name: Creating release branch
          command: |
            git checkout -b ci/release
            git reset --hard origin/master
      - run:
          name: Creating release
          command: npm run release
      - run:
          name: Force-pushing branch
          command: git push origin ci/release --force
      - run:
          name: Creating or updating pull request
          command: |
            versionTag=$(cat package.json | grep -E '^\s*"version":\s*"[0-9]+\.[0-9]+\.[0-9]+",?\s*$' | sed -r 's/.*([0-9]+\.[0-9]+\.[0-9]+).*/v\1/')

            curl -w "%{http_code}\n" -X POST \
              -H 'Accept: application/vnd.github.v3+json' \
              -H "Authorization: token << parameters.github-access-token >>" \
              https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls \
              --data @- \<<-EOF | tee curl.log
                {
                  "title": "New Release: ${versionTag}",
                  "head": "ci/release",
                  "base": "master",
                  "body": "This pull request creates a new release. It will be updated whenever a new commit is pushed to master."
                }
            EOF

            releasePullRequestNumber=$(curl -X GET -H 'Accept: application/vnd.github.v3+json' "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?base=master&head=ci%2Frelease" | grep -E '^\s*"number":\s*[0-9]+,?\s*$' | sed -E 's/.*[^[0-9]([0-9]+)[^0-9].*/\1/')

            if [[ $(cat curl.log | tail -n 1) == 422 ]]; then
              curl -X PATCH \
                -H 'Accept: application/vnd.github.v3+json' \
                -H "Authorization: token << parameters.github-access-token >>" \
                https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$releasePullRequestNumber \
                --data @- \<<-EOF
                  {
                    "title": "New Release: ${versionTag}"
                  }
            EOF
            fi
  publish-circleci-dev:
    executor: circleci-cli/default
    parameters:
      orb-ref:
        description: A versionless orb-ref in the form <namespace>/<orb-name>
        type: string
      token-variable:
        description: The env var containing your token. Pass this as a literal string such as `$ORB_PUBLISHING_TOKEN`. Do not paste the actual token into your configuration.
        type: string
    steps:
      - get-workspace
      - orbs/publish:
          orb-path: sources/index.yml
          orb-ref: << parameters.orb-ref >>@dev:$(echo "${CIRCLE_BRANCH//[^a-zA-Z0-9-]/-}" | tr '[:upper:]' '[:lower:]')
          token-variable: << parameters.token-variable >>
  tag:
    executor: buildpack-deps
    parameters:
      git-ssh-fingerprint:
        type: string
      git-user-email:
        type: string
      git-user-name:
        type: string
    steps:
      - get-workspace
      - halt-if-not-release-commit
      - setup-git-user:
          git-ssh-fingerprint: << parameters.git-ssh-fingerprint >>
          git-user-email: << parameters.git-user-email >>
          git-user-name: << parameters.git-user-name >>
      - tag
  tag-and-publish-circleci:
    executor: circleci-cli/default
    parameters:
      git-ssh-fingerprint:
        type: string
      git-user-email:
        type: string
      git-user-name:
        type: string
      orb-ref:
        description: A versionless orb-ref in the form <namespace>/<orb-name>
        type: string
      token-variable:
        description: The env var containing your token. Pass this as a literal string such as `$ORB_PUBLISHING_TOKEN`. Do not paste the actual token into your configuration.
        type: string
    steps:
      - get-workspace
      - halt-if-not-release-commit
      - setup-git-user:
          git-ssh-fingerprint: << parameters.git-ssh-fingerprint >>
          git-user-email: << parameters.git-user-email >>
          git-user-name: << parameters.git-user-name >>
      - tag
      - orbs/publish:
          orb-path: sources/index.yml
          orb-ref: >-
            << parameters.orb-ref >>@$(git log --format=%B -n 1 $CIRCLE_SHA1 | head -n 1 | sed -r 's/chore\(release\): ([0-9]+\.[0-9]+\.[0-9]+)/\1/')
          token-variable: << parameters.token-variable >>
  tag-and-publish-npm:
    executor: node
    parameters:
      git-ssh-fingerprint:
        type: string
      git-user-email:
        type: string
      git-user-name:
        type: string
    steps:
      - get-workspace
      - halt-if-not-release-commit
      - setup-git-user:
          git-ssh-fingerprint: << parameters.git-ssh-fingerprint >>
          git-user-email: << parameters.git-user-email >>
          git-user-name: << parameters.git-user-name >>
      - tag
      - run: |
          echo "Publishing to NPM"
          npm publish
  terraform-plan:
    parameters:
      directory:
        type: string
      terraform-image-tag:
        type: string
      setup-steps:
        type: steps
        default: []
    executor:
      name: terraform
      tag: << parameters.terraform-image-tag >>
    steps:
      - get-workspace
      - steps: << parameters.setup-steps >>
      - run:
          name: Initializing Terraform
          command: cd << parameters.directory >> && terraform init
      - run:
          name: Creating Terraform Plan
          command: cd << parameters.directory >> && terraform plan -out=terraform.plan
      - put-path:
          path: << parameters.directory >>/terraform.plan
  terraform-apply:
    parameters:
      directory:
        type: string
      terraform-image-tag:
        type: string
      setup-steps:
        type: steps
        default: []
      ignore-missing-plan:
        type: boolean
        default: false
    executor:
      name: terraform
      tag: << parameters.terraform-image-tag >>
    steps:
      - get-workspace
      - steps: << parameters.setup-steps >>
      - run:
          name: Initializing Terraform
          command: cd << parameters.directory >> && terraform init
      - run:
          name: Applying Terraform Plan
          command: |
            cd << parameters.directory >>

            <<# parameters.ignore-missing-plan >>
              if [[ -e "terraform.plan" ]]; then
                terraform apply "terraform.plan"
              else
                terraform apply -auto-approve
              fi
              exit
            <</ parameters.ignore-missing-plan >>

            terraform apply "terraform.plan"
  validate-js:
    executor: node
    steps:
      - get-workspace
      - run:
          name: Validating JavaScript files
          command: npm run validate:js
  validate-terraform:
    parameters:
      directories:
        type: string
      terraform-image-tag:
        type: string
      setup-steps:
        type: steps
        default: []
      run-validate-after-init: # Needed in order to get a minimal amount of validation for modules (which are very hard to run terraform validate on without extra configuration)
        type: boolean
        default: true
    executor:
      name: terraform
      tag: << parameters.terraform-image-tag >>
    steps:
      - get-workspace
      - steps: << parameters.setup-steps >>
      - run:
          name: Validiting Terraform configuration
          command: |
            directories=(<< parameters.directories >>)

            for directory in "${directories[@]}"; do
              cd $directory
              terraform init
              <<# parameters.run-validate-after-init >>
                terraform validate
              <</ parameters.run-validate-after-init >>
              cd -
            done
  build-image:
    parameters:
      setup-steps:
        type: steps
        default: []
      dockerfile-path:
        type: string
      path:
        type: string
      tag:
        type: string
      build-options:
        type: string
        default: ""
    executor: buildpack-deps
    steps:
      - get-workspace
      - setup_remote_docker
      - steps: << parameters.setup-steps >>
      - run:
          name: Building Docker image
          command: docker build --file << parameters.dockerfile-path >> --tag << parameters.tag >> << parameters.build-options >> << parameters.path >>
      - run:
          name: Pushing Docker image
          command: docker push << parameters.tag >>
